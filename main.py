import streamlit as st
from langchain.chat_models.gigachat import GigaChat
from langchain.chains import RetrievalQA
import dotenv
import os
from services.vectorstore_connect import qdrant_vectorstore

try:
    dotenv.load_dotenv()
except:
    pass

GIGACHAT_API_CREDENTIALS = os.environ.get("GIGACHAT_API_CREDENTIALS")

giga = GigaChat(credentials=GIGACHAT_API_CREDENTIALS,
                scope='GIGACHAT_API_CORP', 
                verify_ssl_certs=False,
                model="GigaChat-Plus",
                profanity_check=False,
                #streaming=True
                )

qa = RetrievalQA.from_llm(llm=giga, retriever=qdrant_vectorstore.as_retriever())

with st.sidebar:
    "–û—Ç–≤–µ—Ç—ã –æ—Ç —á–∞—Ç-–±–æ—Ç–∞ –Ω–æ—Å—è—Ç —Å–ø—Ä–∞–≤–æ—á–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä."

    "–û—Ç–≤–µ—Ç—ã –æ—Ç –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –≤—Ä–∞—á–µ–±–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π, –ª—É—á—à–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –º–µ–¥. –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é."

st.title("üí¨ –ú–µ–¥ —á–∞—Ç-–±–æ—Ç")
if "messages" not in st.session_state:
    st.session_state["messages"] = [{"role": "assistant", "content": "–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ–¥ —á–∞—Ç-–±–æ—Ç"}]

for msg in st.session_state.messages:
    st.chat_message(msg["role"]).write(msg["content"])

if question := st.chat_input():
    st.session_state.messages.append({"role": "user", "content": question})
    st.chat_message("user").write(question)
    result = qa(question)
    #result = giga(st.session_state["messages"])
    msg = result['result']
    st.session_state.messages.append({"role": "assistant", "content": msg})
    st.chat_message("assistant").write(msg)